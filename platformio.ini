;PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
; default_envs = d1_mini
; default_envs = d1_mini_OTA
; default_envs = d1_mini_pro
; default_envs = lolin_d32_pro
; default_envs = lolin_d32_pro_OTA
; default_envs = mhetesp32minikit
; default_envs = mhetesp32minikit
; default_envs = IoT-PostBox_v1


[env]
framework = arduino
monitor_speed = 115200
upload_speed = 921600
monitor_raw = yes
; monitor_filters = time, default, esp32_exception_decoder
board_build.filesystem = littlefs

[common_env_data]
framework = arduino
; For USB update:
; upload_port=COM4

; For OTA update:
; Uncoment the upload protocol and select the port target
; upload_protocol = espota
; upload_port = iotdevice

;  To select ota password and port:
; upload_flags =
;     --auth=otapwd
;     --port=8266

; upload_port = IoLed.local
; upload_port = 192.168.1.242
; upload_port = iotbutton.lan

monitor_speed = 115200
upload_speed = 921600

lib_deps_base =
  paclema/WebConfigServer @ ^3.0.0

  sparkfun/SparkFun SCD30 Arduino Library @ ^1.0.12
  mikalhart/TinyGPSPlus @ ^1.0.2
  plerup/EspSoftwareSerial @ ^6.12.7


lib_deps_lora  =
  mcci-catena/MCCI LoRaWAN LMIC library @ ^5.0.1
  electroniccats/CayenneLPP @ ^1.4.0

lib_deps_lvgl  =
  bodmer/TFT_eSPI @ ^2.5.43
  lvgl/lvgl@^9.1.0

build_flags =
  -w                          ; To remove compilation warnings
  ; -D USE_ASYNC_WEBSERVER      ; To use Async webserver defining cpp files:

  -D CONFIG_JSON_SIZE=4096    ; To define WebConfigServer max config.json size

  ; -D ENABLE_SERIAL_DEBUG    ; To enable Serial debug
  ; -D DEBUG_ESP_CORE         ; More debug levels here: https://docs.platformio.org/en/latest/platforms/espressif8266.html#debug-level
  ; -D DEBUG_ESP_WIFI
  ; -D DEBUG_ESP_OTA

  # -D CORE_DEBUG_LEVEL=ARDUHAL_LOG_LEVEL_DEBUG   ; ESP32S2 Serial hangs with CDC. Reduce logs to WARN
  -D CORE_DEBUG_LEVEL=ARDUHAL_LOG_LEVEL_WARN
  -D CONFIG_ARDUHAL_LOG_COLORS=1

build_flags_lora = 
    -D ARDUINO_LMIC_PROJECT_CONFIG_H_SUPPRESS
    -D CFG_eu868=1
    -D CFG_sx1276_radio=1
    -D hal_init=LMICHAL_init
    -D LMIC_DEBUG_LEVEL=2

build_flags_TFT_2 = 
  -D USER_SETUP_LOADED=1
  -D ST7789_DRIVER=1
  ; -D TFT_SDA_READ ; DISABLE FOR ESP32-S2, ENABLE FOR ESP32
  -D TFT_RGB_ORDER=TFT_BGR

  -DUSE_HSPI_PORT=1

  ; ESP32
  ; -D TFT_CS=27
  ; -D TFT_DC=17
  ; ; -D TFT_RST=16
  ; -D TFT_RST=-1
  ; -D TFT_MOSI=21    ;SDA
  ; -D TFT_SCLK=22    ;SCL


  ; ESP32-S2
  -D TFT_CS=34
  -D TFT_DC=45
  ; -D TFT_RST=-1
  -D TFT_RST=SW2_PIN
  -D TFT_MOSI=35    ;SDA
  -D TFT_SCLK=36    ;SCL


  -D TFT_WIDTH=320
  -D TFT_HEIGHT=240
  -D TFT_ROTATION=1

  -DLOAD_GLCD=1
  -D LOAD_FONT2
  -D LOAD_FONT4
  -D LOAD_FONT6
  -D LOAD_FONT7
  -D LOAD_FONT8
  -D LOAD_GFXFF
  -DSMOOTH_FONT

  -D SPI_FREQUENCY=27000000
  -D SPI_TOUCH_FREQUENCY=2500000

build_flags_lvgl=
  ;To include lv_conf.h from /include folder
  -D LV_LVGL_H_INCLUDE_SIMPLE
  -I include  

[env:esp8266base]
platform = espressif8266
lib_deps =
  ${common_env_data.lib_deps_base}

build_flags = ${common_env_data.build_flags}


[env:d1_mini]
extends = env:esp8266base
board = d1_mini


[env:d1_mini_OTA]
extends = env:d1_mini
upload_protocol = espota
upload_port = iotdevice
upload_flags =
  --port=8266


[env:d1_mini_pro]
extends = env:esp8266base
board = d1_mini_pro

build_flags =
  ${env:esp8266base.build_flags}
  ; -Wl,-Teagle.flash.16m14m.ld

; For now we can use only the half of the 16MB with this partition schema:
board_build.ldscript = eagle.flash.8m6m.ld


[env:esp12e]
extends = env:esp8266base
board = esp12e


[env:esp07s]
extends = env:esp8266base
board = esp07s


[env:lolin_d32_pro]
platform = espressif32@3.2.0
board = lolin_d32
framework = ${common_env_data.framework}
platform_packages =
  ; framework-arduinoespressif32 @ https://github.com/espressif/arduino-esp32.git#master
  framework-arduinoespressif32 @ https://github.com/paclema/arduino-esp32#lwip_enabled    ; Must use platform = espressif32@3.2.0
  toolchain-xtensa32@2.80400  ; LWIP needs toolchain-xtensa32 >= v8.4.0
board_build.mcu = esp32
board_build.f_cpu = 240000000L
monitor_speed = ${common_env_data.monitor_speed}
upload_speed = ${common_env_data.upload_speed}
lib_deps =
  ${common_env_data.lib_deps_base}

build_flags =
  ${common_env_data.build_flags}
  -DBOARD_HAS_PSRAM
  -mfix-esp32-psram-cache-issue

board_build.partitions = ./board_partitions/esp32/default_16MB.csv
; board_build.partitions = ./board_partitions/esp32/default.csv


[env:lolin_d32_pro_OTA]
platform = espressif32@3.2.0
board = lolin_d32
framework = ${common_env_data.framework}
platform_packages =
  ; framework-arduinoespressif32 @ https://github.com/espressif/arduino-esp32.git#master
  framework-arduinoespressif32 @ https://github.com/paclema/arduino-esp32#lwip_enabled    ; Must use platform = espressif32@3.2.0
  toolchain-xtensa32@2.80400  ; LWIP needs toolchain-xtensa32 >= v8.4.0
board_build.mcu = esp32
board_build.f_cpu = 240000000L
monitor_speed = ${common_env_data.monitor_speed}
upload_speed = ${common_env_data.upload_speed}
lib_deps =
  ${common_env_data.lib_deps_base}

upload_protocol = espota
upload_port = iotdevice
upload_flags =
  --port=3232

build_flags =
  ${common_env_data.build_flags}
  -DBOARD_HAS_PSRAM
  -mfix-esp32-psram-cache-issue

board_build.partitions = ./board_partitions/esp32/default_16MB.csv
; board_build.partitions = ./board_partitions/esp32/default.csv

[env:esp32base]
platform = https://github.com/pioarduino/platform-espressif32.git#develop
; framework = ${common_env_data.framework}
lib_deps =
  ${common_env_data.lib_deps_base}
  ${common_env_data.lib_deps_lora}
  ${common_env_data.lib_deps_lvgl}
  
  paclema/PowerManagement @ ^0.1.0

build_flags =
  ${common_env_data.build_flags}
  ${common_env_data.build_flags_lora}
  ${common_env_data.build_flags_TFT_2}
  ${common_env_data.build_flags_lvgl}


[env:mhetesp32minikit]
extends = env:esp32base
board = mhetesp32minikit
board_build.partitions = ./board_partitions/esp32/default_noOTA.csv
build_flags =
  ${env:esp32base.build_flags}
  -D VBUS_SENSE_PIN=34
  -D VBAT_SENSE_PIN=35
  -D VBAT_STAT_SENSE_PIN=36
  -D GPS_RX_PIN=44
  -D GPS_TX_PIN=43


[env:mhetesp32devkit]
extends = env:esp32base
board = mhetesp32devkit
board_build.partitions = ./board_partitions/esp32/default_noOTA.csv
build_flags =
  ${env:esp32base.build_flags}
  -D VBUS_SENSE_PIN=34
  -D VBAT_SENSE_PIN=35
  -D VBAT_STAT_SENSE_PIN=36
  -D GPS_RX_PIN=44
  -D GPS_TX_PIN=43


[env:az-delivery-devkit-v4]
extends = env:esp32base
board = az-delivery-devkit-v4

build_flags =
  ${env:esp32base.build_flags}
  -D LED_BUILTIN=-1


[env:IoT-PostBox_v1]
extends = env:esp32base
# platform = https://github.com/pioarduino/platform-espressif32.git#develop   ; v3.3.0 is giving issues using I2C https://github.com/espressif/arduino-esp32/issues/11228
platform = https://github.com/pioarduino/platform-espressif32/releases/download/53.03.12/platform-espressif32.zip

board = iot-postbox_v1
board_build.variants_dir = boards/variants
board_build.partitions = ./board_partitions/esp32/iotpostboxv1_16MB.csv

; TODO: try to upload bootloader
; board_upload.flash_extra_images =
;     0x10000, boards/variants/iotpostbox_v1/bootloader.bin
;     0x410000, boards/variants/iotpostbox_v1/tinyuf2.bin
; upload_command = avrdude $UPLOAD_FLAGS -U flash:w:$SOURCE:i

build_flags =
  ${env:esp32base.build_flags}
  -D LED_BUILTIN=LDO2_EN_PIN

  -D GPS_RX_PIN=44
  -D GPS_TX_PIN=43